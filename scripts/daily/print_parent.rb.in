Encoding.default_external = "euc-jisx0213"
\s*/)
word2 = word1.split(/
/)


# -----------------------------------


li_cnt1 = 0

# 実行処理
word2.each do |d2|
# デバッグ用コード
#	puts '[' + d2 + ']'
	li_cnt1 = li_cnt1 + 1
	# 一時ファイルへの書き込み
	open(temp_file, "w") do |fp|
		fp.print d2
		fp.print ' ' * 5000		# 2002/03/07 竹田氏対応依頼
	end
# デバッグ用の表示
	case	d2
	when	nil
		puts	'改行のみです' + '[' + String(li_cnt1) + ']'
	when	''
		puts	'改行のみです' + '[' + String(li_cnt1) + ']'
	else
		if d2 =~ /\A\s*\z/
			puts	'空白・改行です' + '[' + String(li_cnt1) + ']'
#		else
#			puts	'OK [' + String(li_cnt1) + ']'
		end
	end
	w_exec = exec_file + ' ' + dia_file + ' ' + def_file + ' ' + temp_file
#	w_exec = exec_file + ' ' + dia_file2 + ' ' + def_file2 + ' ' + temp_file2
	# LP名が指定されていたら、引数に追加(2002/03/07 竹田氏作成依頼)
	if lp_name != ''
		w_exec = w_exec + ' ' + lp_name
	end
# デバッグ用の表示
#	puts w_exec
# **
	# 実行前メッセージ出力(2002/03/07 竹田氏作成依頼)
	puts	'Print Start [' + String(li_cnt1) + ']'
	# プログラムの実行
	pid = fork do
		exec w_exec
	end
	sleep 0.01	# 予期せぬエラーの回避のため、待つ(これを行わないと、ruby ver1.4上で呼び出されたスクリプトにエラーが発生する)
	# 実行したプログラムが終わるまで待つ(引数の２番目は、1.4でのエラー回避のため)
	Process.waitpid(pid, 0)
end



# ============================================================

# 一時ファイル削除
begin
	if nil != File.size(temp_file)
		# 一時ファイルが存在する
		# 一時ファイルの削除
		File.delete(temp_file)
	end
rescue
# 例外が発生すれば、一時ファイルが存在しない
end



# ============================================================
