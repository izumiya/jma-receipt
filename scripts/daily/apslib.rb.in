Encoding.default_external = "euc-jisx0213"
",key,value);
	  end
	}
  end
  def []=(name,value)
	if @values[name]
	  @values[name] = value;
	else
	  $stderr.printf("[%s] undefined APS variable
",name);
	end
  end
  def [](name)
	if @values[name]
	  @values[name];
	else
	  $stderr.printf("[%s] undefined APS variable
",name);
	  "";
	end
  end
  def values
	@values
  end
  def clear(rec)
	@values.each { | key, value |
	  if key =~ rec
		@values[key] = "";
	  end
	}
  end
end

class PandaDB < PandaCore
  def dbComm(str)
	if DEBUG
	  $stderr.printf("<<%s
",str);
	end
	@fpDBW.printf("%s
",str);
	@fpDBW.flush;
	line = @fpDBR.gets.chop;
	if DEBUG
	  $stderr.printf(">>%s
",line);
	end
	line;
  end
  def initialize
	@fpDBR = IO.new(3,"r");
	@fpDBW = IO.new(4,"w");
  end
  def execFunction(func)
	str  = "dbctrl.rc=0&";
	str += "dbctrl.func=" + func;
	@line = dbComm(str);
	unPack;
  end
  def fpDBR
	@fpDBR
  end
  def fpDBW
	@fpDBW
  end
end

class PandaTable < PandaDB
  def initialize(db,name)
	@name = name;
	@db = db;
	@values = Hash.new;
	str  = "dbctrl.rc=0&";
	str += "dbctrl.rname=" + @name;
	@line = @db.dbComm(str);
	unPack;
  end
  def getSchema(db,pname = "", func = "")
	@values = Hash.new;
	str  = "dbctrl.rc=%2D1&";
	str += "dbctrl.func=" + func + "&";
	str += "dbctrl.rname=" + @name + "&";
	str += "dbctrl.pname=" + pname;
	@line = @db.dbComm(str);
	unPack;
  end
  def execFunction(func, pname = "")
	str  = "dbctrl.rc=0&";
	str += "dbctrl.func=" + func + "&";
	str += "dbctrl.rname=" + @name + "&";
	str += "dbctrl.pname=" + pname + "&";
	str += pack;
	@line = @db.dbComm(str);
	unPack;
  end
end

class PandaDC < PandaCore
  def initialize
	line = $stdin.gets
	@line = line.chomp;
	@db = PandaDB.new;
	unPack;
  end
  def run
	case @values["mcparea.dc.status"]
	when "LINK"
	  start(self, @db);
	when "PUTG"
	  name = "do_" + @values["mcparea.dc.event"];
	  if respond_to?(name)
		__send__(name, self, @db);
	  end
	else
	end
	out;
  end
  def out
	str = pack;
	printf("%s
",str);
	$stdout.flush;
  end
  def putWindow(name,widget = "" ,type = "")
	@values["mcparea.dc.window"] = name;
	@values["mcparea.dc.widget"] = widget;
	@values["mcparea.dc.puttype"] = type;
	@values["mcparea.dc.status"] = "PUTG";
	@values["mcparea.rc"] = 0;
  end
  WidgetNormal = 0;
  WidgetActive = 1;
  WidgetPreLight = 2;
  WidgetSelected = 3
  WidgetInSensitive = 4;
end

class PandaBatch < PandaCore
  def initialize
	@db = PandaDB.new;
  end
  def run
	start(@db);
  end
end
