#!/bin/bash

JMARECEIPT_ENV="@jma-receipt-env@"
if [ ! -f ${JMARECEIPT_ENV} ]; then
    echo "${JMARECEIPT_ENV} does not found."
    exit 1
fi
. $JMARECEIPT_ENV

#------------------------------------
# $1 : 医療機関識別番号(HOSPNUM)
# $2 : スーパーバイザー
# $3 : エラーファイル名
# $4 : ジョブＩＤ
# $5 : シェルＩＤ
#------------------------------------

HOSPNUM=$1
ERRFILE=$3
JOBID=$4
SHELLID=$(printf "%-8s" $5)

MSTDIR=orca-$(date +%Y%m%d)

UPDKANRIFILE=info/ORCADBR-3.DAT

UPDFILE=${MASTERDIR}/${HOSPNUM}/${MSTDIR}/ORCADBR.OUT
LEN=100
PRFFILE=/tmp/MSTMNT.PRF.$$

orcawget () {
#受信ファイル削除
    if [ -e $1 ] ; then
#	echo "rm start" $1
	rm $1;
    fi
    if [ -n "$OBSOLETEDL" ] ; then
	wget -q ${WGETOPTION} ${MSTUPDATEPATH}/$1
    else
	orcadt_verify.rb --dir . --cacert ${CACERTFILE} ${MSTUPDATEPATH}/$1.p7m
    fi
#接続確認
    if [ $? -eq 0 ] ; then
#	echo "wget end OK"
#ファイルサイズチェック
	if [ -s	./`basename $1` ] ;  then
	    return 0;
	else
	    return 1;
	fi
    else
	return 1;
    fi
}

orcacp () {
    if [ -e $1 ] ; then
	rm $1;
    fi
    if [ -n "$OBSOLETEDL" ] ; then
	cp $1 ./
    else
	orcadt_verify.rb --dir . --cacert ${CACERTFILE} $1.p7m
    fi
    if [ $? -eq 0 ] ; then
#ファイルサイズチェック
	if [ -s ./`basename $1`	] ; then
	    return 0;
	else
	    return 1;
	fi
    else
	return 1;
    fi
}

orcatar () {
    TARFL=$(echo $1 | awk '{i=split($0,arr,"/"); print arr[i]} ' )
    TAR=$(echo ${TARFL} | awk '{i=split($0,arr,"."); print arr[i-1] arr[i]} ' )
    LOCALFL=$(echo ${TARFL} | awk '{i=split($0,arr,"."); print arr[1]".dat"} ' )
    echo ${LOCALFL} "LOCALFL"
    echo ${TARFL} "TARFL"
#受信ファイル削除
    echo $1
    if [ ${TAR} = "targz" ] ; then
	echo ${TAR} "TAR"
	tar zxf ${TARFL}
		#tar確認
	if [ $? -eq 0 ]; then
	    echo "tar end OK"
	else
	    echo "tar end NG"
	    return 1;
	fi
    else
 	echo "NO tar end"
 	return 0;
    fi
#ファイルサイズチェック
    if [ -s ${LOCALFL} ] ; then
	return 0;
    else
	return 1;
    fi
}

cleanup () {
    if	[ -d ${MASTERDIR}/${HOSPNUM}/${MSTDIR} ] ; then
	rm -r ${MASTERDIR}/${HOSPNUM}/${MSTDIR}
    fi

    if [ -e ${PRFFILE} ] ; then
	rm ${PRFFILE}
    fi
}


# disk space check
VOLSIZE=`df -m /var | tail -1 | sed 's/\s\{1,\}/ /g' | cut -d' ' -f4`
echo "${VOLSIZE}"
echo "${MINSIZE}"
if [ -z "$MINSIZE" ]; then
#set default 500MB
    MINSIZE=500
fi
if [ $VOLSIZE -lt $MINSIZE ]; then
    ERRMSG="The space capacity of the disk is insufficient. [ ${VOLSIZE}MB ]"
    ${DBSTUB} -dir ${LDDIRECTORY} -bd orcabt ORCBJOB2 -parameter "JBE${JOBID}${SHELLID}8101,${HOSPNUM},${ERRFILE},,${ERRMSG}"
    echo "${ERRMSG}"
    exit 99
fi

#オフラインメンテナンスであるかチェック
OFFLINEPATH=$(echo ${MSTUPDATEPATH} | sed -ne 's#file://##p')
if [ -z ${OFFLINEPATH} ]; then
    OFFLINE="online"
else
    OFFLINE="offline"
fi

echo ${MSTDIR}
echo ${UPDFILE}

if [ -e ${ERRFILE} ] ; then
    rm ${ERRFILE}
fi

if [ -e ${PRFFILE} ] ; then
    rm ${PRFFILE}
fi
touch ${PRFFILE}


if ! [	-d ${MASTERDIR}/${HOSPNUM}/${MSTDIR} ] ; then
    mkdir -p ${MASTERDIR}/${HOSPNUM}/${MSTDIR}
fi
if ! [	-d ${MASTERDIR}/${HOSPNUM}/orca-mstlog ] ; then
    mkdir -p ${MASTERDIR}/${HOSPNUM}/orca-mstlog
fi

if [ $(pgrep -fo "$0 $HOSPNUM") -ne $$ ]; then
    echo "標準提供マスタ更新処理は既に実行中です"
    exit 1
fi


cd ${MASTERDIR}/${HOSPNUM}/${MSTDIR}

${DBSTUB} -dir ${LDDIRECTORY} -bd orcabt ORCBJOB2 -parameter "STS${JOBID}${SHELLID},${HOSPNUM},${ERRFILE},ＤＢレコード管理情報を取得しています,"
if [  -e ${ERRFILE} ] ; then
    cleanup
    exit 99
fi

rm -f *.*
if  [ ${OFFLINE} = "offline" ]; then
    if  orcacp	${OFFLINEPATH}/${UPDKANRIFILE} ; then
	echo "DBレコード管理情報を複写しました"
    else
	echo "DBレコード管理情報がありませんでした"
	${DBSTUB} -dir ${LDDIRECTORY} -bd orcabt ORCBJOB2 -parameter "JBE${JOBID}${SHELLID}0001,${HOSPNUM},${ERRFILE},,ＤＢレコード管理情報がありませんでした"
	cleanup
	exit 99
    fi
else
#センタからのDB構造体ダウンロード
    LOGMSG=`orcawget ${UPDKANRIFILE} 2>&1`
    RESULT=`echo "${LOGMSG}" | head -1`
    if	[ "[SUCCESS]" = "${RESULT:0:9}" ] ; then
	echo "センタからのDBレコード管理情報のダウンロードが終了しました"
    else
        echo "${LOGMSG}"
	echo "センタからのＤＢレコード管理情報のダウンロードに失敗しました"
	${DBSTUB} -dir ${LDDIRECTORY} -bd orcabt ORCBJOB2 -parameter "JBE${JOBID}${SHELLID}8002,${HOSPNUM},${ERRFILE},,${RESULT}"
	cleanup
        exit 99
    fi
fi

#ダウンロードファイル生成
${DBSTUB}  -dir ${LDDIRECTORY} -bd orcabt ORCXRMST1 -parameter "${HOSPNUM}$2${MSTDIR}"
if [ $? -ne 0 ]	; then
    echo "ダウンロードファイル生成に失敗しました"
    ${DBSTUB} -dir ${LDDIRECTORY} -bd orcabt ORCBJOB2 -parameter "JBE${JOBID}${SHELLID}0003,${HOSPNUM},${ERRFILE},,ダウンロードファイル生成に失敗しました"
    cleanup
    exit 99
fi
#更新用ダウンロードファイル受信
#ファイルサイズチェック
if [ -s ${UPDFILE} ] ; then
    echo "更新用ダウンロードファイルの作成が終了しました"
else
    echo "更新用ダウンロードファイルは作成されませんでした"
    ${DBSTUB}  -dir ${LDDIRECTORY} -bd orcabt ORCBJOB2 -parameter "JBE${JOBID}${SHELLID}8001,${HOSPNUM},${ERRFILE},,"
    cleanup
    exit 0
fi


UPDLIST=$(awk '{gsub(/\t| |;/,""); print} ' ${UPDFILE})
MSTCOUNT=$(echo ${UPDLIST} |wc -w)
MSTSEQ=0
for UPD in ${UPDLIST}
do
    MSTSEQ=$(expr ${MSTSEQ} + 1)
    ${DBSTUB} -dir ${LDDIRECTORY} -bd orcabt ORCBJOB2 -parameter "STS${JOBID}${SHELLID}0000,${HOSPNUM},${ERRFILE},更新データを取得しています $(printf "%d/%d" ${MSTSEQ} ${MSTCOUNT}),"
    if [  -e ${ERRFILE} ] ; then
	cleanup
	exit 99
    fi
    echo ${UPD:35:${LEN}}
    if  [ ${OFFLINE} = "offline" ]; then
	if  orcacp ${OFFLINEPATH}/${UPD:35:${LEN}} ; then
	    echo ${UPD:35:${LEN}} "複写が終了しました"
	else
	    echo ${UPD:35:${LEN}} "複写に失敗しました"
	    ${DBSTUB}  -dir ${LDDIRECTORY} -bd orcabt ORCBJOB2 -parameter "JBE${JOBID}${SHELLID}0005,${HOSPNUM},${ERRFILE},,複写に失敗しました"
	    cleanup
	    exit 99
	fi
    else
        LOGMSG=`orcawget ${UPD:35:${LEN}} 2>&1`
        RESULT=`echo "${LOGMSG}" | head -1`
        if [ "[SUCCESS]" = "${RESULT:0:9}" ]; then
	    echo ${UPD:35:${LEN}} "ダウンロードが終了しました"
	else
            echo "${LOGMSG}"
	    echo ${UPD:35:${LEN}} "ダウンロードに失敗しました"
	    ${DBSTUB} -dir ${LDDIRECTORY} -bd orcabt ORCBJOB2 -parameter "JBE${JOBID}${SHELLID}0006,${HOSPNUM},${ERRFILE},,${RESULT}"
	    cleanup
	    exit 99
	fi
    fi
done

DATLIST=""
for UPD in ${UPDLIST}
do
#	echo ${UPD}
    if	orcatar ${UPD} ; then
	echo ${UPD} "解凍処理が終了しました"
    else
	echo ${UPD} "解凍処理に失敗しました"
	${DBSTUB}  -dir ${LDDIRECTORY} -bd orcabt ORCBJOB2 -parameter "JBE${JOBID}${SHELLID}0007,${HOSPNUM},${ERRFILE},,解凍処理に失敗しました"
	cleanup
	exit 99
    fi
    DAT=$(echo ${UPD} | awk '{i=split($0,arr,"/");gsub(/.tar.gz/,".dat",arr[i]); print arr[i]} ')
    DAT=${UPD}$(wc -l ${DAT} | awk '{i=split($0,arr," ");printf("#%06d",arr[1])}')
    DATLIST=${DATLIST}" "${DAT}
done
#DB構造変更処理
UPDCOUNT=0
MSTSEQ=0
for UPD in ${DATLIST}
do
    MSTSEQ=$(expr ${MSTSEQ} + 1)
    UPD1=$(echo ${UPD} | awk '{i=split($0,arr,"#");gsub(/.tar.gz/,".dat",arr[1]); print arr[1] } ')
    COUNT=$(echo ${UPD} | awk '{i=split($0,arr,"#"); print arr[i]} ' )
    UPDCOUNT=$(expr ${UPDCOUNT} + ${COUNT})
    MSTCNTMSG=$(printf "%d/%d" ${MSTSEQ} ${MSTCOUNT})
    echo ${UPD1} "DB更新"
#ダウンロードファイル生成
    ${DBSTUB}  -dir ${LDDIRECTORY} -bd orcabt ORCXRMST2 -parameter "${HOSPNUM}${MSTDIR}${UPD1}*****************************************************,$(printf "%06d" ${MSTCOUNT}),$(printf "%06d" ${MSTSEQ}),${MSTCNTMSG},${COUNT},${ERRFILE},${JOBID},${SHELLID},${PRFFILE}"
    if [  -e ${ERRFILE} ] ; then
	cleanup
	exit 99
    fi
done

echo  "全ての処理が完了しました"
cleanup
${DBSTUB}  -dir ${LDDIRECTORY} -bd orcabt ORCBJOB2 -parameter "JBE${JOBID}${SHELLID}0000,${HOSPNUM},${ERRFILE},,マスタ更新処理が終了しました"

exit 0
