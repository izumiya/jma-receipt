#!/bin/sh

if test -z "$JMARECEIPT_ENV"; then
    JMARECEIPT_ENV="@jma-receipt-env@"
fi
if ! test -f "$JMARECEIPT_ENV"; then
    exit 0
fi

. $JMARECEIPT_ENV

HOME=/home/orca
MSTDIR=orca-$(date +%Y%m%d)

UPDKANRIFILE=info/ORCADBR-2.DAT

UPDFILE=/home/orca/$MSTDIR/ORCADBR.OUT
LEN=100

function orcawget () {
#受信ファイル削除
	if [	-e	$1	]
	then
#	echo "rm start" $1
		rm $1;
	fi
	wget -q $WGETOPTION $MSTUPDATEPATH/$1
#接続確認
	if [ $? -eq 0 ]	;	then 
#	echo "wget end OK"
		return 0;
	else
		return 1;
	fi
#ファイルサイズチェック
	if [	-s	$1	]
	then
		return 0;
	else
		return 1;
	fi
}

function orcatar () {
	TARFL=`echo $1 | awk '{i=split($0,arr,"/"); print arr[i]} ' `
	TAR=`echo $TARFL | awk '{i=split($0,arr,"."); print arr[i-1] arr[i]} ' `
	LOCALFL=`echo $TARFL | awk '{i=split($0,arr,"."); print arr[1]".dat"} ' ` 
	echo $LOCALFL "LOCALFL"
	echo $TARFL "TARFL"
#受信ファイル削除
	echo $1
	if [	$TAR = "targz" ]
	then
		echo $TAR "TAR"
		tar zxf $TARFL
		echo $TAR "END"
	else
		echo "NO tar end"
		return 0;
	fi
#tar確認
	if [ $? -eq 0 ]	;	then 
		echo "tar end OK"
	else
		echo "tar end NG"
		return 1;
	fi
#ファイルサイズチェック
	if [	-s	$LOCALFL	]
	then
		return 0;
	else
		return 1;
	fi
}

#オフラインメンテナンスであるかチェック
OFFLINEPATH=`echo $MSTUPDATEPATH | sed -ne 's#file://##p'`
if [ -z $OFFLINEPATH ]; then
    OFFLINE="online"
else
    OFFLINE="offline"
fi

echo $MSTDIR
echo $UPDFILE
if ! [	-d	$HOME/$MSTDIR	];	then 
	cd $HOME
	mkdir $MSTDIR
fi
if ! [	-d	$HOME/orca-mstlog	];	then 
	cd $HOME
	mkdir orca-mstlog 
fi
cd $HOME/$MSTDIR
rm -f *.*
if  [ $OFFLINE = "offline" ]; then
    if  [ -e $OFFLINEPATH/$UPDKANRIFILE ]; then
	cp $OFFLINEPATH/$UPDKANRIFILE ./
	echo "DBレコード管理情報を複写しました"
    else
	echo "DBレコード管理情報がありませんでした"
	$DBSTUB -dir $LDDIRECTORY -bd orcabt ORCBJOB -parameter JBE0000001MSTMNT99
	exit 99
    fi
else
#センタからのDB構造体ダウンロード
    if	orcawget $UPDKANRIFILE ;	then
	echo "センタからのDBレコード管理情報のダウンロードが終了しました"
    else
	echo "センタからのDBレコード管理情報のダウンロードに失敗しました"
	$DBSTUB -dir $LDDIRECTORY -bd orcabt ORCBJOB -parameter JBE0000001MSTMNT99
        exit 99
    fi
fi

#ダウンロードファイル生成
	$DBSTUB  -dir $LDDIRECTORY -bd orcabt ORCXRMST1 -parameter $MSTDIR
	if [ $? -ne 0 ]	;	then 
		echo "ダウンロードファイル生成に失敗しました"
		$DBSTUB -dir $LDDIRECTORY -bd orcabt ORCBJOB -parameter JBE0000001MSTMNT99
		exit 99
	fi
#更新用ダウンロードファイル受信
#ファイルサイズチェック
	if [	-s	$UPDFILE	]
	then
		echo "更新用ダウンロードファイルの作成が終了しました"
	else
		echo "更新用ダウンロードファイルの作成に失敗しました"
		$DBSTUB  -dir $LDDIRECTORY -bd orcabt ORCBJOB -parameter JBE0000001MSTMNT01
		rm -r $HOME/$MSTDIR
		exit 99
	fi

UPDLIST=`awk '{gsub(/\t| |;/,""); print} ' $UPDFILE`

for UPD in $UPDLIST
do
	echo ${UPD:34:$LEN}
	if  [ $OFFLINE = "offline" ]; then
	    if  [ -e $OFFLINEPATH/${UPD:34:$LEN} ]; then
		cp $OFFLINEPATH/${UPD:34:$LEN} ./
		echo ${UPD:34:$LEN} "複写が終了しました"
	    else
		echo ${UPD:34:$LEN} "複写に失敗しました"
		$DBSTUB  -dir $LDDIRECTORY -bd orcabt ORCBJOB -parameter JBE0000001MSTMNT99
	        exit 99
	    fi
	else
	    if	orcawget ${UPD:34:$LEN} ;	then
		echo ${UPD:34:$LEN} "ダウンロードが終了しました"
	    else
		echo ${UPD:34:$LEN} "ダウンロードに失敗しました"
		$DBSTUB  -dir $LDDIRECTORY -bd orcabt ORCBJOB -parameter JBE0000001MSTMNT99
	        exit 99
	    fi
	fi
done

for UPD in $UPDLIST
do
#	echo $UPD
	if	orcatar $UPD ;	then
		echo $UPD "解凍処理が終了しました"
	else
		$DBSTUB  -dir $LDDIRECTORY -bd orcabt ORCBJOB -parameter JBE0000001MSTMNT99
		echo $UPD "解凍処理に失敗しました"
	        exit 99
	fi
done
#DB構造変更処理
for UPD in $UPDLIST
do
	UPD1=`echo $UPD | awk '{gsub(/.tar.gz/,".dat"); print} ' `
	echo $UPD1 "DB更新"
#ダウンロードファイル生成
	$DBSTUB  -dir $LDDIRECTORY -bd orcabt ORCXRMST2 -parameter $MSTDIR$UPD1*****************************************************
	echo $?
	if [ $? -ne 0 ]	;	then 
		echo $UDP1 "更新処理に失敗しました"
		$DBSTUB -dir $LDDIRECTORY -bd orcabt ORCBJOB -parameter JBE0000001MSTMNT99
		exit 99
	fi
	echo "vacuum ANALYZE tbl_tensu;" | psql $DBNAME
done
	echo "vacuum ANALYZE tbl_syskanri;" | psql $DBNAME
	echo "vacuum ANALYZE tbl_chk;" | psql $DBNAME

echo  "全ての処理が完了しました"
rm -r $HOME/$MSTDIR
	$DBSTUB -dir $LDDIRECTORY -bd orcabt ORCBJOB -parameter JBE0000001MSTMNT00
