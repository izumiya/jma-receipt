Encoding.default_external = "euc-jisx0213"
[\s\S]*?\Z/, '\1'
#	puts hir_head1

	# 階層定義ファイル形式の判定
	sh_type = realize_topline(hir_head1)

	# デバッグ用のメッセージ表示
#	puts '=' * 60
#	puts debug_realize_topline_mes 1, sh_type
#	puts '=' * 60

	# 文字コードのみチェック
	case	sh_type[3]
	when	0
		puts '文字コードが未定義のようですが、続行します'
	when	1
		# EUC-JPコード
		puts 'EUC-JPなので、続行します'
#	when	2
#		# Shift_JISコード
#		puts 'Shift_JISなので、続行します'
#	when	3
#		# UTF-8コード
#	when	4
		# JISコード
	else
		raise '階層定義ファイルが対応できない文字コードなので、異常終了させます'
	end

	# 階層定義ファイルのコメントアウト処理
	hir_data2 = record_del_comment_space hir_data1


	# Repeat定義処理
	hir_data3 = repeat_extend_proc(hir_data2)


	# 階層データのbase定義処理
	hir_data4 = basehierarchy_extend_proc(hir_data3)


	# 階層データのLineTarget命令への識別子セット処理
	hir_data5 = linetarget_setmark_proc(hir_data4)


	if output_mode == 2
		# 起点位置付加モードなので、「LineTarget」行を除くXMLパス定義の後ろに起点位置を付加する
		hir_data5 = hierarchy_add_startpoint_proc(hir_data5)
	end


	# 現在、シフトJIS決めうちなので、以下のように先頭にヘッダを付ける
	hir_data5 = '#$ type=hierarchy-execute version=2.0 encoding=EUC-JP' + "
" + hir_data5
#	hir_data5 = '#$ type=hierarchy-execute version=2.0 encoding=Shift_JIS' + "
" + hir_data5


	# テスト的に、階層定義ファイルの書き込み
	open($dest_file, 'w') do |fp_dh|
		fp_dh.print hir_data5
	end


# =============================================================================
# =============================================================================
