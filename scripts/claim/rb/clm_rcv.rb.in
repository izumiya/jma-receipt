Encoding.default_external = "euc-jisx0213"
")

    file_path_name = File.join($file_path, make_file_name)
    Log(file_chk(file_path_name) + "
")

    rcvbuf = FileSockRcv.new(file_path_name, sock)
    ans = SndRsp.new(sock)
    
    Log("Start Receiving File --------------------------
")

    begin
      rcvbuf.start
    rescue ConnectError, CReadError
      Log("Connection Error
")
      Log("Client disconnects
")
      sock.close
      sock = nil
      Log("temporary file delete.
")
      File.delete(file_path_name)
    else
      Log("Complete Receiving File -----------------------
")
    
      # convert claim data J-code to UTF8
      Log("Convert to UTF-8
")
      u8_file = file_path_name.gsub(/.xml$/, "_u8.xml")
      `ruby xml_jcnv.rb #{file_path_name} tou8 -f > #{u8_file}`  
      file_path_name = u8_file

      # check claim data and send respons to client
      Log("Claim valid check
")
      if parser_check(file_path_name, $dtdfl, $logfl)
        Log("Send [ack] to client
")
        ans.ok
        valid_check_flg = true
      else
        Log("Send [nak] to client
")
        ans.ng
        valid_check_flg = false
      end

      #  kick shell script ( decode(ruby) and cobol) )
      if valid_check_flg
        out_file = file_path_name.gsub(/_u8.xml$/, ".txt")
        Log("Decode claim data to #{out_file} and kick COBOL
")
        Log("#{$sh_path_name} #{file_path_name} #{out_file}

")

        # スレッドの生成処理
        thr_execflg = 0
        #Thread.start {
          if $DEBUG
            Log("Thread Start[" + String($seq_put + 1) + "]
")
            Log("Thread Start[" + String($seq_put + 1) + "]
")
            thr_start_time = ''; thr_end_time = ''
            thr_start_time = Time.now.strftime("%H:%M:%S")
          end

          thr = nil
          # スレッド生成メイン処理
          thr = ExecThreadMain.new($seq_put, $sh_path_name, file_path_name, out_file)
          $seq_put += 1
          if $seq_put > $seq_max
            $seq_put = 0
          end

          thr_execflg = 1
          # メイン処理
          thr.main

          if $DEBUG
            thr_end_time = Time.now.strftime("%H:%M:%S")
            Log("Thread End[" + String($seq_exec) + "] ")
            Log("[" + thr_start_time + "〜" + thr_end_time + "]
")
            Log("End Sequence NO. = [" + String($seq_put) + "]
")
          end
        #}

        # スレッド生成のウエイト処理
        while thr_execflg == 0
          sleep 1
        end
      end
    end
  end

  def Log_Save(claim_log=@claim_log)
    File.open(claim_log, "a+") do |file|
      STDOUT.reopen(file)
      STDERR.reopen(file)
    end
  end

  def Log(text)
    print text
    open($logfl, "a") do |log|
      log.puts("Log: #{text}")
    end
  end

  def Reception
    begin
      Log("server:>> ")
      @gsock = TCPServer.open($port)

      Log("No #{$port} port open ")
      Log("[" + Time.now.strftime("%H:%M:%S") + "]
")
      Log("Waiting...
")

      while true
        Thread.start(@gsock.accept) do |sock|
          socket_thread(sock)
          Log("Close port [" + Time.now.strftime("%H:%M:%S") + "]
")
          Log("Client disconnects
")
          sock.close if sock != nil
        end
      end
    rescue Errno::EADDRINUSE => error
      Log("Error:#{error}
")
    rescue => error
      Log("Error:#{error}
")
      retry
    end
    @gsock.close if @gsock != nil
  end
end

if __FILE__ == $0
  claim = ClaimRcv.new
  claim.Reception
end
