#!/bin/bash

JMARECEIPT_ENV="@jma-receipt-env@"
if [ ! -f ${JMARECEIPT_ENV} ]; then
    echo "${JMARECEIPT_ENV} does not found."
    exit 1
fi
. $JMARECEIPT_ENV

umask 022

TMPDIR=/var/tmp
MSTDIR=orca-$(date +%Y%m%d)
VERSIONFL=${DOCDIR}/version

UPDSQL1="UPDATE tbl_dbkanri SET termid='##' WHERE kanricd='ORCADB00';"
SQLSELECT="SELECT * FROM tbl_dbkanri WHERE kanricd='ORCADB00';"

UPDKANRIFILE=info/ORCADBS.DAT

UPDFILE=$TMPDIR/$MSTDIR/ORCADBS.OUT
TBLFILE=$TMPDIR/$MSTDIR/ORCADBS.TBL
LEN=100

INSTALLLOG="$LOGDIR"/orca-db-install-@VERSION@.log
THISTIMELOG="$LOGDIR"/orca-db-install-thistime.log
#

PATH=$PATCHSCRIPTSDIR/allways:$SCRIPTSDIR/allways:$PATCHLIBDIR:$ORCALIBDIR:$PATH

orcawget () {
    DWNFL=`echo $1 | awk '{i=split($0,arr,"/"); print arr[i]} ' `
    if [ ${DWNFL:1:10}	= "XXXXXXXXXX"	] ;	then
	return 0;
    fi
#受信ファイル削除
    if [ -e $DWNFL ] ; then
#	echo "rm start" $DWNFL
	rm $DWNFL;
    fi
    orcadt_verify.rb --dir . --cacert ${CACERTFILE} ${DBUPGRADEPATH}/$1.p7m
#接続確認
    if [ $? -eq 0 ] ; then
#	echo "wget end OK"
#ファイルサイズチェック
	if [ -s $DWNFL ] ; then
	    return 0;
	else
	    return 1;
	fi
    else
	return 1;
    fi
}

orcatar () {
    TARFL=`echo $1 | awk '{i=split($0,arr,"/"); print arr[i]} ' `
    TAR=`echo $TARFL | awk '{i=split($0,arr,"."); print arr[i-1] arr[i]} ' `
    LOCALFL=`echo $TARFL | awk '{i=split($0,arr,"."); print arr[1]".dat"} ' `
#解凍処理
    echo $1
    if [ $TAR = "targz" ] ; then
	tar zxf $TARFL
    else
	return 0;
    fi
#tar確認
    if [ $? -eq 0 ] ; then
	echo "tar end OK"
    else
	echo "tar end NG"
	return 1;
    fi
#ファイルサイズチェック
    if [ -s $LOCALFL ] ; then
	return 0;
    else
	return 1;
    fi
}

if [ ! -e "$INSTALLLOG" ]; then
    su - $ORCAUSER -c "touch $INSTALLLOG"
fi
su - $ORCAUSER -c "rm -f $THISTIMELOG"

#エラーファイル用フォルダ作成
if ! [ -d $TMPDIR/orca-mstlog ] ; then
    cd $TMPDIR
    mkdir orca-mstlog
    chown "$ORCAUSER":"$ORCAGROUP" orca-mstlog
fi
#整合性チェック
rm -f $TMPDIR/orca-mstlog/SQLSELECT.TXT
rm -f $TMPDIR/orca-mstlog/master_log
VERLIST=`awk '/version/{gsub(/\t| |;/,""); print} ' $VERSIONFL`
VERDATA=`echo $VERLIST | awk '{i=split($0,arr,"("); print arr[i]} ' `
VERDATA1=`echo $VERDATA | awk '{gsub(/[-)]/,""); print } ' `
VERDATA2=`echo $VERDATA | awk '{gsub(/[)]/,""); print } ' `
echo "VERDATA1=" $VERDATA1
echo "$SQLSELECT" > $TMPDIR/orca-mstlog/SQLSELECT.TXT
su - $ORCAUSER -c "psql ${DBCONNOPTION} -o $TMPDIR/orca-mstlog/sql.out -f $TMPDIR/orca-mstlog/SQLSELECT.TXT $DBNAME"
DBLIST=`awk '/--------|row/ {skip = ! skip; next};/};/ {exit}; (skip == 1) {gsub(/\t| |;/,""); print} ' $TMPDIR/orca-mstlog/sql.out`
DBVERSION=`echo $DBLIST | awk '{i=split($0,arr,"|"); print arr[2]} ' `
DBVERSION1=`echo $DBVERSION | awk '{gsub(/[-)]/,""); print } ' `
#	if [ `echo $DBVERSION1 $VERDATA1 | awk '{print($1<$2) ? "true" : "false"} '` = "true" ];	then
if [ `echo $DBVERSION1 $VERDATA1 | awk '{print($1<=$2) ? "true" : "false"} '` = "true" ] ; then
    echo "OK"
else
    echo "ダウングレードの処理となっています。処理を中止します" 2>&1 | tee -a $INSTALLLOG $THISTIMELOG
    exit 99
fi
#整合性チェックここまで
#DB管理情報更新
echo "update tbl_dbkanri set version='$VERDATA2' where kanricd='ORCADB00';" | su - $ORCAUSER -c "psql ${DBCONNOPTION} -e $DBNAME 2>&1 | tee -a $INSTALLLOG $THISTIMELOG"

#オフラインメンテナンスであるかチェック
OFFLINEPATH=`echo $DBUPGRADEPATH | sed -ne 's#file://##p'`
if [ -z $OFFLINEPATH ]; then
    OFFLINE="online"
else
    OFFLINE="offline"
fi

echo $MSTDIR
echo $UPDFILE
if ! [ -d $TMPDIR/$MSTDIR ] ; then
    cd $TMPDIR
    mkdir $MSTDIR
    chown "$ORCAUSER":"$ORCAGROUP" $MSTDIR
fi
cd $TMPDIR/$MSTDIR
rm -f *
if  [ $OFFLINE = "offline" ]; then
    if  [ -e $OFFLINEPATH/$UPDKANRIFILE ]; then
	cp $OFFLINEPATH/$UPDKANRIFILE ./
	echo "DBレコード管理情報を複写しました" 2>&1 | tee -a $INSTALLLOG $THISTIMELOG
    else
	echo "DBレコード管理情報がありませんでした" 2>&1 | tee -a $INSTALLLOG $THISTIMELOG
	exit 99
    fi
else
#センタからのDB構造体ダウンロード
    if	orcawget $UPDKANRIFILE ;	then
	echo "センタからのDBレコード管理情報のダウンロードが終了しました" 2>&1 | tee -a $INSTALLLOG $THISTIMELOG
    else
	echo "センタからのDBレコード管理情報のダウンロードに失敗しました" 2>&1 | tee -a $INSTALLLOG $THISTIMELOG
        exit 99
    fi
fi

#DB管理情報の取得
su - $ORCAUSER -c "psql ${DBCONNOPTION} -o $TMPDIR/orca-mstlog/sql.out -f $TMPDIR/orca-mstlog/SQLSELECT.TXT $DBNAME"
DBLIST=`awk '/--------|row/ {skip = ! skip; next};/};/ {exit}; (skip == 1) {gsub(/\t| |;/,""); print} ' $TMPDIR/orca-mstlog/sql.out`
#ダウンロードファイル生成
ORCXSMST1 $MSTDIR$DBLIST
if [ $? -ne 0 ]	;	then
    echo "ダウンロードファイル生成に失敗しました" 2>&1 | tee -a $INSTALLLOG $THISTIMELOG
    exit 99
fi
#更新用ダウンロードファイル受信
#ファイルサイズチェック
if [ -s $UPDFILE ] ; then
    echo "更新用ダウンロードファイルの作成が終了しました" 2>&1 | tee -a $INSTALLLOG $THISTIMELOG
else
    echo "更新用ファイルはありません" 2>&1 | tee -a $INSTALLLOG $THISTIMELOG
    rm -r $TMPDIR/$MSTDIR
    exit 
fi

UPDLIST=`awk '{gsub(/\t| |;/,""); print} ' $UPDFILE`

for UPD in $UPDLIST
do
    echo ${UPD:35:$LEN}
    if  [ $OFFLINE = "offline" ]; then
	DWNFL=`echo ${UPD:35:$LEN} | awk '{i=split($0,arr,"/"); print arr[i]} ' `
	if [ ${DWNFL:1:10}	= "XXXXXXXXXX"	] ;	then
	    echo ${UPD:35:$LEN} "オリジナルダンプスキップしました" 2>&1 | tee -a $INSTALLLOG $THISTIMELOG
	else
	    if  [ -e $OFFLINEPATH/${UPD:35:$LEN} ]; then
		cp $OFFLINEPATH/${UPD:35:$LEN} ./
		echo ${UPD:35:$LEN} "複写が終了しました" 2>&1 | tee -a $INSTALLLOG $THISTIMELOG
	    else
		echo ${UPD:35:$LEN} "複写に失敗しました" 2>&1 | tee -a $INSTALLLOG $THISTIMELOG
	        exit 99
	    fi
	fi
    else
	if	orcawget ${UPD:35:$LEN} ;	then
	    echo ${UPD:35:$LEN} "ダウンロードが終了しました" 2>&1 | tee -a $INSTALLLOG $THISTIMELOG
	else
	    echo ${UPD:35:$LEN} "ダウンロードに失敗しました" 2>&1 | tee -a $INSTALLLOG $THISTIMELOG
	    exit 99
	fi
    fi
done

for UPD in $UPDLIST
do
#	echo $UPD
    if	orcatar $UPD ;	then
	echo $UPD "解凍処理が終了しました" 2>&1 | tee -a $INSTALLLOG $THISTIMELOG
    else
	echo $UPD "解凍処理に失敗しました" 2>&1 | tee -a $INSTALLLOG $THISTIMELOG
	exit 99
    fi
done
#DB構造変更処理
DBOPTION="${DBCONNOPTION} ${DBNAME}"

for UPD in $UPDLIST
do
    UPD1=`echo $UPD | awk '{gsub(/.tar.gz/,".dat"); print} ' `
    UPD2=`echo $UPD1 | awk '{i=split($0,arr,"/"); print arr[i]} ' `
#SQL
#
    if	[ -s $TMPDIR/$MSTDIR/$UPD2 ]; then
	if	[ "${UPD2:0:7}" = "ORCADBC" ]; then
	    su - $ORCAUSER -c "bash $TMPDIR/$MSTDIR/$UPD2 \"${DBOPTION}\" ${INSTALLLOG} ${THISTIMELOG}"
	else
	    su - $ORCAUSER -c "psql ${DBCONNOPTION} -e $DBNAME < $TMPDIR/$MSTDIR/$UPD2 2>&1 | tee -a $INSTALLLOG $THISTIMELOG"
	fi
    fi
#	LOGLIST=`awk '/NOTICE:/ {skip = !skip; next};/};/ {exit}; (skip == 1) {gsub(/\t| |;/,""); print} ' $TMPDIR/$MSTDIR/log`
##	LOGLIST=`awk '/ERROR:/{gsub(/\t| |;/,""); print} ' $TMPDIR/$MSTDIR/log`
    LOGLIST=`awk '/ERROR:/{gsub(/\t| |;/,""); print} ' $THISTIMELOG`
    for LOG in $LOGLIST
    do
	if [ "${LOG:0:6}" = "ERROR:" ];	then
	    echo $UDP2 "更新処理に失敗しました" 2>&1 | tee -a $INSTALLLOG $THISTIMELOG
	    exit 99
	fi
    done
#	if [ $? -ne 0 ]	;	then 
#	echo $UDP2 "更新処理に失敗しました" 2>&1 | tee -a $INSTALLLOG $THISTIMELOG
#		exit 99
#	fi

#DB管理情報更新

    echo "update tbl_dbkanri set dbsversion1='${UPD:0:21}',dbsversion2='${UPD:0:21}',upymd=to_char(now(),'yyyymmdd'),uphms=to_char(now(),'hh24miss') where kanricd='ORCADB00';" | su - $ORCAUSER -c "psql ${DBCONNOPTION} -e $DBNAME 2>&1 | tee -a $INSTALLLOG $THISTIMELOG"
done

echo  "全ての処理が完了しました" 2>&1 | tee -a $INSTALLLOG $THISTIMELOG
#注意☆☆☆テストが終了したら元に戻す
rm -r $TMPDIR/$MSTDIR

